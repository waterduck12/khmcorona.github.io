{"version":3,"sources":["logo.svg","components/Header.js","components/Contents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Header","className","Contents","useState","confirmedData","setConfirmedData","quarantinedData","setQuarantinedData","comparedData","setComparedData","useEffect","fatchEvents","a","axios","get","res","makeData","data","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","death","Deaths","recovered","Recovered","findItem","find","push","labels","map","datasets","label","backgroundColor","fill","borderColor","last","length","options","legend","display","position","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.230865ec.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n        <h1>COVID-19</h1>\r\n        <select>\r\n          <option>국내</option>\r\n          <option>세계</option>\r\n        </select>\r\n      </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Bar, Doughnut, Line } from 'react-chartjs-2'\r\n\r\nconst Contents = () => {\r\n\r\n  const [confirmedData, setConfirmedData] = useState({})\r\n  const [quarantinedData, setQuarantinedData] = useState({})\r\n  const [comparedData, setComparedData] = useState({})\r\n\r\n  useEffect(()=>{\r\n    const fatchEvents = async ()=>{\r\n      const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\")\r\n      makeData(res.data)\r\n    }\r\n    const makeData = (items)=>{\r\n      const arr = items.reduce((acc, cur)=>{\r\n        const currentDate = new Date(cur.Date);\r\n        const year = currentDate.getFullYear();\r\n        const month = currentDate.getMonth();\r\n        const date = currentDate.getDate();\r\n        const confirmed = cur.Confirmed;\r\n        const active = cur.Active;\r\n        const death = cur.Deaths;\r\n        const recovered = cur.Recovered;\r\n\r\n        const findItem = acc.find(a=> a.year === year && a.month === month);\r\n\r\n        if(!findItem){\r\n          acc.push({year, month, date, confirmed, active, death, recovered})\r\n        }\r\n        if(findItem && findItem.date < date){\r\n          findItem.active = active;\r\n          findItem.death = death;\r\n          findItem.date = date;\r\n          findItem.year = year;\r\n          findItem.month = month;\r\n          findItem.recovered = recovered;\r\n          findItem.confirmed = confirmed;\r\n        }\r\n        \r\n        return acc;\r\n      }, [])\r\n\r\n      const labels = arr.map(a=> `${a.month+1}월`);\r\n      setConfirmedData({\r\n        labels,\r\n        datasets : [\r\n          {\r\n           label: \"국내 누적 확진자\",\r\n           backgroundColor: \"salmon\",\r\n           fill: true,\r\n           data: arr.map(a=>a.confirmed)\r\n          },\r\n        ]    \r\n      });\r\n      setQuarantinedData({\r\n        labels,\r\n        datasets : [\r\n          {\r\n           label: \"월별 격리자 현황\",\r\n           borderColor: \"salmon\",\r\n           fill: false,\r\n           data: arr.map(a=>a.active)\r\n          },\r\n        ]    \r\n      });\r\n      const last = arr[arr.length -1]\r\n      setComparedData({\r\n        labels: [\"확진자\", \"격리해제\", \"사망\"],\r\n        datasets : [\r\n          {\r\n           label: \"누적 확진, 해제, 사망 비율\",\r\n           backgroundColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n           borderColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n           fill: false,\r\n           data: [last.confirmed, last.recovered, last.death]\r\n          },\r\n        ]    \r\n      });\r\n    }\r\n    fatchEvents();\r\n  }, [])\r\n\r\n    return (\r\n        <section>\r\n        <h2>국내 코로나 현황</h2>\r\n        <div className=\"contents\">\r\n          <div>\r\n            <Bar data={confirmedData} options={\r\n               { title: { display : true, text : \"누적 확진자 추이\", fontSize : 16}},\r\n               {legend: {display : true, position : \"bottom\"}}\r\n              } />\r\n          </div>\r\n          <div>\r\n            <Line data={quarantinedData} options={\r\n               { title: { display : true, text : \"월별 격리자 현황\", fontSize : 16}},\r\n               {legend: {display : true, position : \"bottom\"}}\r\n              } />\r\n          </div>\r\n          <div>\r\n            <Doughnut data={comparedData} options={\r\n               { title: { display : true, text : `누적 확진, 해제, 사망 (${new Date().getMonth()+1}월)`, fontSize : 16}},\r\n               {legend: {display : true, position : \"bottom\"}}\r\n              } />\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )\r\n}\r\n\r\nexport default Contents","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header'\nimport Contents from './components/Contents'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Contents />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}